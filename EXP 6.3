// ================================
// Account Transfer System in Node.js
// ================================

// Import dependencies
const express = require("express");
const mongoose = require("mongoose");

// Initialize app
const app = express();
app.use(express.json());

// ----------------------
// MongoDB Connection
// ----------------------
mongoose
  .connect("mongodb://127.0.0.1:27017/bankDB", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("✅ MongoDB Connected"))
  .catch((err) => console.error("❌ MongoDB Connection Error:", err));

// ----------------------
// User Schema & Model
// ----------------------
const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  balance: { type: Number, required: true, min: 0 },
});

const User = mongoose.model("User", userSchema);

// ----------------------
// 1️⃣ Create Users Endpoint
// ----------------------
app.post("/create-users", async (req, res) => {
  try {
    // Create sample users Alice and Bob
    const users = await User.insertMany([
      { name: "Alice", balance: 1000 },
      { name: "Bob", balance: 500 },
    ]);

    res.status(201).json({
      message: "Users created",
      users,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Error creating users" });
  }
});

// ----------------------
// 2️⃣ Transfer Money Endpoint
// ----------------------
app.post("/transfer", async (req, res) => {
  try {
    const { fromUserId, toUserId, amount } = req.body;

    // Validate inputs
    if (!fromUserId || !toUserId || !amount) {
      return res.status(400).json({ message: "Missing required fields" });
    }

    // Fetch both users
    const sender = await User.findById(fromUserId);
    const receiver = await User.findById(toUserId);

    // Check if users exist
    if (!sender || !receiver) {
      return res.status(404).json({ message: "User not found" });
    }

    // Check if sender has enough balance
    if (sender.balance < amount) {
      return res.status(400).json({ message: "Insufficient balance" });
    }

    // Perform balance updates
    sender.balance -= amount;
    receiver.balance += amount;

    // Save both users sequentially
    await sender.save();
    await receiver.save();

    res.status(200).json({
      message: `Transferred $${amount} from ${sender.name} to ${receiver.name}`,
      senderBalance: sender.balance,
      receiverBalance: receiver.balance,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Transfer failed" });
  }
});

// ----------------------
// Start Server
// ----------------------
const PORT = 3000;
app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));
